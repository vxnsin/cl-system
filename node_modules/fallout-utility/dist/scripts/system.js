"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidIPv4 = exports.createReadFile = exports.path = exports.isDebugging = exports.getOperatingSystem = exports.OS = void 0;
const os_1 = __importDefault(require("os"));
const inspector_1 = __importDefault(require("inspector"));
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
var OS;
(function (OS) {
    OS[OS["WINDOWS"] = 0] = "WINDOWS";
    OS[OS["LINUX"] = 1] = "LINUX";
    OS[OS["MACOS"] = 2] = "MACOS";
    OS[OS["ANDROID"] = 3] = "ANDROID";
    OS[OS["OPENBSD"] = 4] = "OPENBSD";
    OS[OS["FREEBSD"] = 5] = "FREEBSD";
    OS[OS["OTHER"] = 6] = "OTHER";
})(OS = exports.OS || (exports.OS = {}));
/**
 * Get operation system
 */
function getOperatingSystem() {
    switch (os_1.default.platform()) {
        case 'win32':
            return OS.WINDOWS;
        case 'linux':
            return OS.LINUX;
        case 'darwin':
            return OS.MACOS;
        case 'android':
            return OS.ANDROID;
        case 'openbsd':
            return OS.OPENBSD;
        case 'freebsd':
            return OS.FREEBSD;
        default:
            return OS.OTHER;
    }
}
exports.getOperatingSystem = getOperatingSystem;
/**
 * Checks if debug mode is enabled
 * @experimental
 */
function isDebugging() {
    return !!inspector_1.default.url() || /--debug|--inspect/g.test(process.execArgv.join(''));
}
exports.isDebugging = isDebugging;
/**
 * @deprecated This is a dumb idea (Already implemented in path module)
 */
exports.path = getOperatingSystem() === OS.WINDOWS ? path_1.default.win32 : path_1.default.posix;
function createReadFile(filePath, defaultContent, options) {
    if (!(0, fs_1.existsSync)(filePath)) {
        (0, fs_1.mkdirSync)(exports.path.dirname(filePath), { recursive: true });
        (0, fs_1.writeFileSync)(filePath, options?.encodeFileData ? options?.encodeFileData(defaultContent) : String(defaultContent), options?.encoding);
    }
    const fileData = (0, fs_1.readFileSync)(filePath, options?.encoding);
    return options?.formatReadData ? options.formatReadData(fileData, defaultContent) : fileData;
}
exports.createReadFile = createReadFile;
/**
 * Checks if a string is a valid IPv4
 * @param ip String to check
 */
function isValidIPv4(ip) {
    return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip);
}
exports.isValidIPv4 = isValidIPv4;
